
window.jQuery || loadjscssfile('http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js', 'js');
window.Isystk || loadjscssfile('http://isystk.github.com/js/isystk.js', 'js');

// JS・CSSファイルを動的にロードします。
function loadjscssfile(filename, filetype){
	if (filetype === 'js'){
		var fileref = document.createElement('script');
		fileref.setAttribute('type','text/javascript');
		fileref.setAttribute('src', filename);
	} else if (filetype === 'css') {
		var fileref=document.createElement('link');
		fileref.setAttribute('rel', 'stylesheet');
		fileref.setAttribute('type', 'text/css');
		fileref.setAttribute('href', filename);
	}
	if (typeof fileref !== 'undefined') {
		document.getElementsByTagName('head')[0].appendChild(fileref);
	}
}

// JSファイルがロードされるまで待機する
(function() {
	var timer = undefined;
	var waitjs =  function() {
		if( typeof( jQuery ) === 'undefined' ||
			typeof( Isystk ) === 'undefined' ) {
			timer = setTimeout( waitjs, 0 );
		} else {
			clearTimeout(timer);
			$ = jQuery;
			$(initialise);
		}
	};
	waitjs();
})();


function initialise() {
	new Kaiji().run();
}

function Kaiji() {
	this.setting = {
		url : 'http://isystk.github.com/kaiji/',
		img : {
			zawa: 'img/zawa.jpg',
			ise: 'img/isystk.png'
		}
	};
	this.getImage = function(name) {
		return this.setting.url + this.setting.img[name];
	};
}


// 処理を実行します
Kaiji.prototype.run = function () {
	var kaiji = this,
		interval = 3000,
		initinterval = interval,
		timer = undefined,
		excute =  function() {
			if( 0 < interval ) {
				// 徐々にざわざわを増やしていく
				for (var i=0;i<(initinterval / interval); i++) {
					kaiji.zawazawa();
				}
				timer = setTimeout( excute, interval );
				interval = interval - 300;
			} else {
				clearTimeout(timer);
				// ざわざわが終わったら、Webコンテンツを浮遊させる
				kaiji.breakcontents();
			}
		};
	excute();
};

// 画面表示エリアに「ざわ」を表示します。
Kaiji.prototype.zawazawa = function () {
	var width = $(window).width(), // 表示領域幅
		height = $(window).height(), // 表示領域高さ
		scrollTop = $(window).scrollTop(), // スクロール上位置
		scrollLeft = $(window).scrollLeft(); // スクロール左位置

	var $img = $('<p><img src="'+ this.getImage('zawa')+'" width="'+256+'"></p>');
	$img.css('position', 'absolute')
	.css('top', Isystk.randInt(scrollTop, scrollTop+height-$img.height()))
	.css('left', Isystk.randInt(scrollLeft+width-$img.width()))
	.css('z-index', 9999)
	.css('display', 'none')
	.appendTo('body')
	.fadeIn(2000, function () {
		$(this).fadeOut(2000, function() {
			$(this).remove();
		});
	});
};

// Web画面上のコンテンツを浮遊させます。
Kaiji.prototype.breakcontents = function() {
	var range = $(window).width();
	var target = $('h1, p, li, dt, dd');

	target.each(function(i) {
		var $this = $(this),
		// 要素をランダム配置
		getRandomPosition = function() {
			return 'translateX(' + Isystk.randInt(range, -range) + 'px) '+
				'translateY(' + Isystk.randInt(range, -range) + 'px) '+
				'translateZ(' + Isystk.randInt(range, -range) + 'px) '+
				'rotateX(' + Isystk.randInt(360, -360) +  'deg) ' +
				'rotateY(' + Isystk.randInt(360, -360) +  'deg) ' +
				'rotateZ(' + Isystk.randInt(360, -360) +  'deg) ';
		},
		position1 = getRandomPosition(),
		position2 = getRandomPosition(),
		position3 = getRandomPosition();

		// トランジションでランダムな位置に１度だけ移動させる
		$this.css(Isystk.Vendor.getProperty('transition-property'), Isystk.Vendor.getProperty('transform'))
		.css(Isystk.Vendor.getProperty('transition-duration'), '3.0s')
		.css(Isystk.Vendor.getProperty('transition-timing-function'), 'cubic-bezier(0.610, -0.220, 0.555, 1.105)')
		.css(Isystk.Vendor.getProperty('transform'), position1)
		// トランジション終了時にアニメーションに処理を移行する
		.bind(Isystk.Vendor.transitionend, randomAnimation);

		// アニメーションでランダムな位置に連続で移動させる
		function randomAnimation() {
			var keyframe = [
				'0% {'+Isystk.Vendor.getProperty('transform')+': '+position1+' }',
				'30% {'+Isystk.Vendor.getProperty('transform')+': '+position2+' }',
				'60% {'+Isystk.Vendor.getProperty('transform')+': '+position3+' }',
				'100% {'+Isystk.Vendor.getProperty('transform')+': '+position1+' }'
			];
			var cssAnimation = document.createElement('style');
			cssAnimation.type = 'text/css';
			var rules = document.createTextNode(Isystk.Vendor.getKeyframeProperty('move'+i) + '{' +
				keyframe.join(" ") +
				'}');
			cssAnimation.appendChild(rules);
			document.getElementsByTagName("head")[0].appendChild(cssAnimation);
			$this.css(Isystk.Vendor.getProperty('animation-name'), 'move'+i)
			.css(Isystk.Vendor.getProperty('animation-timing-function'), 'cubic-bezier(0.0, 0.0, 1.0, 1.0)')
			.css(Isystk.Vendor.getProperty('animation-duration'), '60.0s')
			.css(Isystk.Vendor.getProperty('animation-iteration-count'), 'infinite');
		}

	});

	// クリックで元の位置に配置
	$('body').click(function(e) {
		e.preventDefault();
		target.each(function() {
			var css = 'translateX(0px) translateY(0px) translateZ(0px) ' +
				'rotateX(0deg) rotateY(0deg) rotateZ(0deg)';
			$(this).unbind(Isystk.Vendor.transitionend)
			.css(Isystk.Vendor.getProperty('animation-name'), '')
			.css(Isystk.Vendor.getProperty('transform'), css);
		});
	});
};


